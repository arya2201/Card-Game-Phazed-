QUESTION


Write a function called phazed_group_type that takes the following single argument:

group
A group of cards in the form of a list, each element of which is a 2-character string with the value (drawn from '234567890JQKA') followed by the suit (drawn from 'SHDC'), e.g. ['2C', '2S', '2H'] represents a group of three cards, made up of the Two of Clubs, the Two of Spades, and the Two of Hearts.
The function should return a sorted list of integers indicating card combination types as specified below, in the case that group is a valid instance of one or more of the following combinations of cards (and the empty list in the instance that it doesn't correspond to any valid card combination). Note that the combination of cards in its entirety must satisfy the requirements of the combination definition, such that ['2C', '2C', '4C', 'KC', '9C', 'AH', 'JC'] is not a valid set of three cards of the same value, e.g., as it is made up of seven cards (despite the fact that it contains ['2C', '2C', 'AH'] which is a valid set of three cards of the same value).

1
A set of three cards of the same value, e.g. ['2C', '2S', '2H'] represents a set of three Twos. Note that the set may include Wilds, but must include at least two "natural" cards (i.e. non-Wild cards), which define the value. Note also that the sequence of the cards is not significant for this group type.
2
A set of seven cards of the same suit, e.g. ['2C', '2C', '4C', 'KC', '9C', 'AH', 'JC'] represents a set of seven Clubs. Note that the set may include Wilds (as we see in our example, with the Ace of Hearts), but must include at least two "natural" cards (i.e. non-Wild card), which define the suit. Note also that the sequence of the cards is not significant for this group type.
3
A set of four cards of the same value, e.g. ['4H', '4S', 'AC', '4C'] represents a set of four Fours. Note that the set may include Wilds (as we see in our example, with the Ace of Clubs), but must include at least two "natural" cards (i.e. non-Wild cards), which define the value. Note also that the sequence of the cards is not significant for this group type.
4
A run of eight cards, e.g. ['4H', '5S', 'AC', '7C', '8H', 'AH', '0S', 'JC'] represents a run of eight cards. Note that the card combination may include Wilds (as we see in our example, with the Ace of Clubs standing in for a Six and the Ace of Hearts standing in for a Nine), but must include at least two "natural" cards (i.e. non-Wild cards). Note also that the sequence of the cards is significant for this group type, and that ['4H', '5S', 'AC', '8H', '7C', 'AH', '0S', 'JC'], e.g., is not a valid run of eight, as it is not in sequence.
5
A run of four cards of the same colour, e.g. ['4H', '5D', 'AC', '7H'] represents a run of four Red cards. Note that the card combination may include Wilds (as we see in our example, with the Ace of Clubs standing in for a Red Six), but must include at least two "natural" cards (i.e. non-Wild cards), which define the colour. Note also that the sequence of the cards is significant for this group type, and that ['4H', '5D', '7H', 'AC'] is not a valid run of four cards of the same colour, as it is not in sequence.
6
A 34-accumulation of cards, that is an accumulation of cards totalling 34 in value, e.g. ['KS', '0D', '8C', '3S']. Note that for accumulations, Aces do not function as Wilds, and simply take the value 1.
7
A 34-accumulation of cards of the same colour, that is an accumulation of cards of the same colour totalling 34 in value, e.g. ['KS', '0C', '8C', '3S']. Note that for accumulations, Aces do not function as Wilds, and simply take the value 1.
Example calls to the function are:

>>> phazed_group_type(['2C', '2S', '2H'])
[1]
>>> phazed_group_type(['2C', '2C', '4C', 'KC', '9C', 'AH', 'JC'])
[2]
>>> phazed_group_type(['4H', '4S', 'AC', '4C'])
[3]
>>> phazed_group_type(['4H', '5S', 'AC', '7C', '8H', 'AH', '0S', 'JC'])
[4]
>>> phazed_group_type(['4H', '5D', 'AC', '7H'])
[5]
>>> phazed_group_type(['KS', '0D', '8C', '3S'])
[6]
>>> phazed_group_type(['KS', '0C', '8C', '3S'])
[6, 7]
>>> phazed_group_type(['2C', '2C', '4C', 'KC', '9C', 'AS', '3C'])
[2, 6, 7]
>>> phazed_group_type(['4H', '5D', '7C', 'AC'])
[]


CODE:::

def check_color(group):
    ''' 
    Check the color of the group given (Red or black)
    '''
    flag = []
    
    # Going through the loop to find color
    for card in group:
        if (card[:2] != '0A') and (card[-1] in ['H', 'D']):
            flag.append(1)
        elif (card[:2] != '0A') and (card[-1] in ['C', 'S']):
            flag.append(0)
    return flag


def run_of_cards(group):
    '''
    Checking for run of cards in the group
    '''
    
    # Checking if the A's appear in start of the run
    flag = True
    if group[0][:2] == '0A':
        if group[1][:2] == '0A':
            if group[2][:2] == '0A':
                if group[3][:2] == '0A':
                    if group[4][:2] == '0A':
                        if group[5][:2] == '0A':
                            group = group[6:]
                        else:
                            group = group[5:]
                    else:
                        group = group[4:]
                else:
                    group = group[3:]
            else:
                group = group[2:]
        else:
            group = group[1:]
                           

    temp = group[0][:2]
    if temp == '0A':
        temp = int(group[1][:2]) - 1
    for i in range(1, len(group)):
        
        upper = group[i][:2]
        if ((upper == '0A') or
            (int(temp) + 1) == int(upper) or
            (int(temp) == 13 and int(upper) == 2)):

            # Checking for the run after King card
            if upper == '0A':
                if group[i - 1][:2] == '13':
                    temp = 2
                else:
                    temp = int(temp) + 1
            else:
                temp = upper
        else:
            flag = False
            break
    return flag


def phazed_group_type(group):
    ''' 
    A function which takes a list of cards and checks the correct
    group for it
    '''

    card_deck = {
        '2': '02',
        '3': '03',
        '4': '04',
        '5': '05',
        '6': '06',
        '7': '07',
        '8': '08',
        '9': '09',
        '0': '10',
        'J': '11',
        'Q': '12',
        'K': '13',
        'A': '0A'
    }
    
    # Forming a valid card
    for i in range(len(group)):
        if group[i][0] in card_deck.keys():
            group[i] = card_deck[group[i][0]] + group[i][1]
    
    num_wild = 0
    
    # Checking the number of wild cards
    for wild_card in group:
        if wild_card[:2] == '0A':
            num_wild += 1

    # Checking that there are atleast two natural cards        
    check_nc = len(group) - num_wild
    if check_nc < 2:
        return []
    
    val_list = []
    suit_list = []
    accumulation = 0

    # Finding a value, suit and accumulation
    for card in group:
        if card[:2] != '0A':
            val_list.append(card[:2])
            suit_list.append(card[-1])
        accumulation += 1 if card[:2] == '0A' else int(card[:2])
    
    phaze_result = []

    # Phaze 1
    if len(group) == 3:
        if (int(len(set(val_list))) == 1):
            phaze_result.append(1)

    # Phaze 2    
    if len(group) == 7:
        if (int(len(set(suit_list))) == 1):
            phaze_result.append(2)

    # Phaze 3
    if len(group) == 4:
        if (int(len(set(val_list))) == 1):
            phaze_result.append(3)

    # Phaze 4
    if len(group) == 8:
        if run_of_cards(group):
            phaze_result.append(4)
    
    # Phaze 5
    if len(group) == 4:
        flag = check_color(group)
        if len(set(flag)) == 1:
            if run_of_cards(group):
                phaze_result.append(5)
    
    # Phaze 6,7
    if accumulation == 34:
        phaze_result.append(6)
        flag = check_color(group)
        if (len(set(flag)) == 1):
            phaze_result.append(7)
            
    return phaze_result
    


if __name__ == '__main__':
    # Example calls to the function.
    
    print(phazed_group_type(['2C', '2S', '2H']))
    print(phazed_group_type(['2C', '2C', '4C', 'KC', '9C', 'AH', 'JC']))
    print(phazed_group_type(['4H', '4S', 'AC', '4C']))
    print(phazed_group_type(['QH', 'AH', '2s', '3C', 'AC', '5H', 'AS', '7C']))
    print(phazed_group_type(['4H', '5D', 'AC', '7H']))
    print(phazed_group_type(['KS', '0D', '8C', '3S']))
    print(phazed_group_type(['KS', '0C', '8C', '3S']))
    print(phazed_group_type(['2C', '2C', '4C', 'KC', '9C', 'AS', '3C']))
    print(phazed_group_type(['4H', '5D', '7C', 'AC']))
    

